#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
#
AC_PREREQ(2.61)

m4_define([ckit_major_version], [0])
m4_define([ckit_minor_version], [0])
m4_define([ckit_micro_version], [1])
m4_define([ckit_version],
	  [ckit_major_version.ckit_minor_version.ckit_micro_version])

AC_INIT(ckit, [ckit_version], [xiaohu417@gmail.com])
AC_CONFIG_SRCDIR([ckit/ckit.h])
AC_CONFIG_HEADER([config.h])
AC_CONFIG_AUX_DIR([config])
AC_CONFIG_MACRO_DIR([m4])
AM_INIT_AUTOMAKE([1.10])
AM_MAINTAINER_MODE
m4_ifdef([AM_SILENT_RULES],[AM_SILENT_RULES([yes])])

# Honor aclocal flags
ACLOCAL="$ACLOCAL $ACLOCAL_FLAGS"

# Output version information
MAJOR_VERSION=ckit_major_version
MINOR_VERSION=ckit_minor_version
MICRO_VERSION=ckit_micro_version
AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(MICRO_VERSION)

AC_DEFINE(MAJOR_VERSION,[ckit_major_version],
	  [Define to the major version of ckit])
AC_DEFINE(MINOR_VERSION,[ckit_minor_version],
	  [Define to the minor version of ckit])
AC_DEFINE(MICRO_VERSION,[ckit_micro_version],
	  [Define to the micro version of ckit])

# Posix variant
AC_GNU_SOURCE
AC_AIX
AC_MINIX

# Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_AWK
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB
LT_PREREQ([2.2.4])
LT_INIT([disable-static])
AC_CANONICAL_HOST
AC_SYS_LONG_FILE_NAMES
AC_SYS_LARGEFILE

# Checks for libraries.
AC_CHECK_LIB(pthread, pthread_create, [],
	     [** pthread not found, CKit will be compile without MT safe.])
PKG_CHECK_MODULES([CHECK], [check >= 0.9.4], [],
		  [AC_MSG_ERROR([** check library not found.  you can get it from http://check.sourceforge.net])])

# Checks for header files.
AC_HEADER_STDC
AC_HEADER_STDBOOL
AC_HEADER_TIME
AC_CHECK_HEADERS([inttypes.h stddef.h stdint.h stdlib.h])
AC_CHECK_HEADERS([string.h sys/time.h syslog.h unistd.h])
AC_CHECK_HEADERS([pthread.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_STRUCT_TM
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_TYPE_INT16_T
AC_TYPE_UINT16_T
AC_TYPE_INT32_T
AC_TYPE_UINT32_T
AC_TYPE_INT64_T
AC_TYPE_UINT64_T
AC_TYPE_INTMAX_T
AC_TYPE_UINTMAX_T
AC_TYPE_INTPTR_T
AC_TYPE_UINTPTR_T

# Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_MEMCMP
AC_FUNC_STRFTIME
AC_CHECK_FUNCS([on_exit atexit gettimeofday memset])
AC_CHECK_FUNCS([qsort qsort_r heapsort mergesort])

# Checks for flavours of varargs macros
AC_MSG_CHECKING(for ISO C99 varargs macros in C)
AC_TRY_COMPILE([],[
int a(int p1, int p2, int p3);
#define call_a(...) a(1,__VA_ARGS__)
call_a(2,3);
], have_iso_c_varargs=yes,have_iso_c_varargs=no)
AC_MSG_RESULT($have_iso_c_varargs)

AC_MSG_CHECKING(for ISO C99 varargs macros in C++)
if test "x$CXX" = "x"; then
dnl No C++ compiler
  have_iso_cxx_varargs=no
else
  AC_LANG_CPLUSPLUS
  AC_TRY_COMPILE([],[
int a(int p1, int p2, int p3);
#define call_a(...) a(1,__VA_ARGS__)
call_a(2,3);
],have_iso_cxx_varargs=yes,have_iso_cxx_varargs=no)
  AC_LANG_C
fi
AC_MSG_RESULT($have_iso_cxx_varargs)

AC_MSG_CHECKING(for GNUC varargs macros)
AC_TRY_COMPILE([],[
int a(int p1, int p2, int p3);
#define call_a(params...) a(1,params)
call_a(2,3);
],have_gnuc_varargs=yes,have_gnuc_varargs=no)
AC_MSG_RESULT($have_gnuc_varargs)

# Generate ckit-config.h
AC_CONFIG_COMMANDS([ckit/ckit-config.h],
		   [ckitconfig=ckit/ckit-config.h-tmp
cat > $ckitconfig << __EOF
/* CKit: Data structure and arithmetic implement
 * System configure information
 * CKit release under the MIT License.
 * This file was generated by configure, DON'T modify.
 */
#ifndef CKIT_CONFIG_H
#define CKIT_CONFIG_H

$std_includes

#ifdef __cplusplus
extern "C" {
#endif
__EOF

cat >> $ckitconfig <<__EOF

$thread_enabled_defines
$version_defines
__EOF

	if test x$have_iso_c_varargs = xyes ; then
		cat >> $ckitconfig <<__EOF
#ifndef __cplusplus
# define CKIT_HAVE_ISO_VARARGS 1
#endif
__EOF
	fi
	if test x$have_iso_cxx_varargs = xyes ; then
		cat >> $ckitconfig <<__EOF
#ifdef __cplusplus
# define CKIT_HAVE_ISO_VARARGS 1
#endif
__EOF
	fi
	if test x$have_gnuc_varargs = xyes ; then
		cat >> $ckitconfig <<__EOF

/* gcc-2.95.x supports both gnu style and ISO varargs, but if -ansi
 * is passed ISO vararg support is turned off, and there is no work
 * around to turn it on, so we unconditionally turn it off. */
#if __GNUC__ == 2 && __GNUC_MINOR__ == 95
# undef CKIT_HAVE_ISO_VARARGS
#endif
#define CKIT_HAVE_GNUC_VARARGS 1
__EOF
	fi

	cat >> $ckitconfig <<__EOF

$bool_defines
__EOF

	cat >> $ckitconfig <<__EOF

#ifdef __cplusplus
}
#endif

#endif /* CKIT_CONFIG_H */
__EOF

	if cmp -s $ckitconfig ckit/ckit-config.h; then
		AC_MSG_NOTICE([ckit/ckit-config.h is unchanged])
		rm -f $ckitconfig
	else
		mv $ckitconfig ckit/ckit-config.h
	fi
],[
version_defines="
/* Version number defines. */
#define CKIT_MAJOR_VERSION  $MAJOR_VERSION
#define CKIT_MINOR_VERSION  $MINOR_VERSION
#define CKIT_MICRO_VERSION  $MICRO_VERSION
"
have_iso_c_varargs=$have_iso_c_varargs
have_iso_cxx_varargs=$have_iso_cxx_varargs
have_gnuc_varargs=$have_gnuc_varargs

if test x$ac_cv_lib_pthread_pthread_create = xyes -a \
  x$ac_cv_header_pthread_h = xyes; then
  thread_enabled_defines="#include <pthread.h>
#define CKIT_HAVE_THREAD  1"
fi

if test "x$ac_cv_header_stdbool_h" = "xyes" ; then
  bool_defines="#include <stdbool.h>"
fi
if test "x$ac_cv_type__Bool" != "xyes" ; then
  bool_defines="\${bool_defines}
#ifdef __cplusplus
typedef bool  _Bool;
#else
# define _Bool  signed char
#endif
#define false (_Bool)0
#define true  (_Bool)1
#define __bool_true_false_are_defined 1"
fi
bool_defines="\${bool_defines}
#define bool_t  _Bool"

std_includes="#include <stdio.h>
#include <stdarg.h>
#include <errno.h>"
if test "x$ac_cv_header_sys_types_h" = "xyes" ; then
  std_includes="\${std_includes}
#include <sys/types.h>"
fi
if test "x$ac_cv_header_sys_stat_h" = "xyes" ; then
  std_includes="\${std_includes}
#include <sys/stat.h>"
fi
if test "x$ac_cv_header_stdlib_h" = "xyes" ; then
  std_includes="\${std_includes}
#include <stdlib.h>"
fi
if test "x$ac_cv_header_stddef_h" = "xyes" ; then
  std_includes="\${std_includes}
#include <stddef.h>"
fi
if test "x$ac_cv_header_string_h" = "xyes" ; then
  std_includes="\${std_includes}
#include <string.h>"
fi
if test "x$ac_cv_header_strings_h" = "xyes" ; then
  std_includes="\${std_includes}
#include <strings.h>"
fi
if test "x$ac_cv_header_inttypes_h" = "xyes" ; then
  std_includes="\${std_includes}
#include <inttypes.h>"
fi
if test "x$ac_cv_header_stdint_h" = "xyes" ; then
  std_includes="\${std_includes}
#include <stdint.h>"
fi
if test "x$ac_cv_header_unistd_h" = "xyes" ; then
  std_includes="\${std_includes}
#include <unistd.h>"
fi
])

AC_CONFIG_FILES([Makefile
                 ckit/Makefile
                 docs/Makefile
                 tests/Makefile])
AC_OUTPUT
