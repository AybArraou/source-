Description: Replace unconditional use of PATH_MAX
 The patch below fixes an unconditional use of PATH_MAX which causes the
 GNU/Hurd platform to fail to build from source the memcached package.
Forwarded: no
Bug-Debian: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=637695
Author: Svante Signell <svante.signell@telia.com>
Reviewed-by: Arno TÃ¶ll <debian@toell.net>
Last-Update: 2011-09-15

Index: memcached-1.4.9/memcached.c
===================================================================
--- memcached-1.4.9.orig/memcached.c	2011-10-17 17:10:17.000000000 -0400
+++ memcached-1.4.9/memcached.c	2011-10-18 11:13:20.356389426 -0400
@@ -49,7 +49,7 @@
 
 /* FreeBSD 4.x doesn't have IOV_MAX exposed. */
 #ifndef IOV_MAX
-#if defined(__FreeBSD__) || defined(__APPLE__)
+#if defined(__FreeBSD__) || defined(__APPLE__) || defined(__GNU__)
 # define IOV_MAX 1024
 #endif
 #endif
@@ -5048,12 +5048,15 @@
     /* create the listening socket, bind it, and init */
     if (settings.socketpath == NULL) {
         const char *portnumber_filename = getenv("MEMCACHED_PORT_FILENAME");
-        char temp_portnumber_filename[PATH_MAX];
+        char *temp_portnumber_filename = NULL;
+        size_t len;
         FILE *portnumber_file = NULL;
 
         if (portnumber_filename != NULL) {
+            len = strlen(portnumber_filename)+4+1;
+            temp_portnumber_filename = malloc(len);
             snprintf(temp_portnumber_filename,
-                     sizeof(temp_portnumber_filename),
+                     len,
                      "%s.lck", portnumber_filename);
 
             portnumber_file = fopen(temp_portnumber_filename, "a");
@@ -5088,6 +5091,7 @@
         if (portnumber_file) {
             fclose(portnumber_file);
             rename(temp_portnumber_filename, portnumber_filename);
+            free(temp_portnumber_filename);
         }
     }
 
